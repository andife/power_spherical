# SPDX-FileCopyrightText: 2024 Andreas Fehlner
#
# SPDX-License-Identifier: MIT

name: Publish Python distribution to TestPyPI and PyPI

on: 
  schedule:
    # Run weekly on Monday 00:00
    - cron:  '00 00 * * MON'
  push:
    branches: [master,"*"]
  pull_request:
    branches: [master]

jobs:
  build:
    name: Build distribution with poetry
    runs-on: ubuntu-latest
    outputs:
      hash: ${{ steps.hash.outputs.hash }}
  
    permissions:
        id-token: write  # IMPORTANT: mandatory for trusted publishing
  
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    - name: Install Poetry / Build Package
      run: |
        curl -sSL https://install.python-poetry.org | python3 - 
        poetry install
        poetry build

    - name: Test with pytest
      run: poetry run pytest -ra
    
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    # Generate hashes used for provenance.
    - name: generate hash
      id: hash
      run: cd dist && echo "hash=$(sha256sum * | base64 -w0)" >> $GITHUB_OUTPUT
    - name: Print variable
      run: echo "Hash $GITHUB_OUTPUT"    

  publish-to-testpypi:
    name: Publish to TestPyPI    
    needs:
      - build
    if: (github.ref == 'refs/heads/master') && (github.event_name == 'schedule')
    runs-on: ubuntu-latest

    environment:
      name: testpypi
      url: https://test.pypi.org/p/power-spherical

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/


  publish-to-pypi:
    name: Publish to PyPI
    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    needs:
    - build
    runs-on: ubuntu-latest

    environment:
      name: pypi
      url: https://pypi.org/p/power-spherical

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1      

  provenance:
    name: Generate SLSA provenance data
    needs: [build]
    permissions:
      actions: read
      id-token: write
      contents: write  # https://github.com/slsa-framework/slsa-github-generator/issues/2044 :(
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: '${{ needs.build.outputs.hash }}'
      upload-assets: true      


  github-release:
    name: >-
      Sign with Sigstore and upload them to GitHub Release
    needs:
    - build

    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v2.1.1
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl

    - name: Rename files # to mach new file extension https://github.com/sigstore/sigstore-python/blob/main/CHANGELOG.md#changed
      run: |
        sudo apt-get install mmv 
        mmv "./dist/*.sigstore" ./dist/#1.sigstore.json
  
    # - name: Create GitHub Release
    #   release is created by the ui.
    - name: Upload artifact signatures to GitHub Release
      if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload
        '${{ github.ref_name }}' dist/** 
        --repo '${{ github.repository }}'                
        